library(shiny); runApp('main_server.R')
library(readr)
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
help("Convert", package="Seurat")
runApp('main_server.R')
View(trajectory_server)
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
}
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
}
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
# Conversion
observeEvent(input$convert_button, {  # Suppose que vous avez un bouton pour déclencher la conversion
tryCatch({
# Save the Seurat object temporarily as a HDF5 file
temp_seurat_file <- tempfile(fileext = ".h5")
SaveH5Seurat(seurat_to_convert(), filename = temp_seurat_file, overwrite = TRUE)
# Define the path for the converted file
converted_file_path <- tempfile(fileext = ".h5ad")
# Convert the temporary HDF5 Seurat object to anndata using SeuratDisk's Convert function
Convert(source = temp_seurat_file, dest = converted_file_path, assay = "RNA")
# Clean up the temporary file and update the path to converted file
file.remove(temp_seurat_file)
path_to_converted_file(converted_file_path)
showNotification("Conversion réussie!")
}, error = function(e) {
showNotification(paste0("Error: ", e$message), type = "error")
})
})
runApp('main_server.R')
runApp('main_server.R')
ui <- dashboardPage(
skin = "green",
# Ajouter un en-tête de page
dashboardHeader(title = tags$img(src = "header.png", height = "53px", width = "218px")),
# Ajouter une barre latérale
dashboardSidebar(
tags$head(
tags$style(HTML("
/* Aligner le contenu de la sidebar avec le contenu principal */
.sidebar .sidebar-menu {
margin-top: 5px;
}
/* Augmenter la largeur de la bulle d'information */
.popover {
width: 300px;
}
/* Style pour ajouter l'image au header */
.main-header {
background-image: url('www/header.png');
background-repeat: no-repeat;
background-position: center center;
}
")),
tags$script(src = "my_script.js")
),
useShinyjs(),
# Ajouter des onglets à la barre latérale
sidebarMenu(
menuItem("Introduction", tabName = "introduction", icon = icon("mug-hot")),
menuItem(
"Single Dataset Analysis", icon = icon("virus-covid"),
menuItem("Load dataset", tabName = "intro", icon = icon("file-arrow-down")),
menuItem("Data cleanup & Variable features", tabName = "qc", icon = icon("bug")),
menuItem("Dimensional reduction", tabName = "perform_linear_dimensional_reduction", icon = icon("home")),
menuItem("Heat maps", tabName = "heat_maps", icon = icon("thermometer-half")),
menuItem("Dimensionality of the dataset", tabName = "dimensionality_of_the_dataset", icon = icon("th-large")),
menuItem("Clustering", tabName = "cluster_the_cells", icon = icon("brain")),
menuItem("Differentially expressed genes", tabName = "gene_cluster", icon = icon("react")),
menuItem("Genes expressions", tabName = "visualizing_marker_expression", icon = icon("flask")),
menuItem("Assigning cell type identity", tabName = "assigning_cell_type_identity", icon = icon("id-card")),
menuItem("Cluster biomarkers", tabName = "cluster_biomarkers", icon = icon("earth-americas")),
menuItem("Subset", tabName = "subset", icon = icon("project-diagram"))
),
menuItem(
"Multiple Datasets Analysis", icon = icon("viruses"),
menuItem("Load datasets", tabName = "merge_dataset", icon = icon("file-arrow-down")),
menuItem("Clustering", tabName = "plot_merge", icon = icon("brain")),
menuItem("Differentially expressed genes", tabName = "DE_merged_dataset", icon = icon("react")),
menuItem("Genes expressions", tabName = "visualization_merge", icon = icon("flask")),
menuItem("Assigning cell type identity", tabName = "assigning_cell_type_identity_merge", icon = icon("id-card")),
menuItem("Cluster biomarkers", tabName = "combined_analysis", icon = icon("earth-americas")),
menuItem("Subset", tabName = "subset_merge", icon = icon("project-diagram"))
),
menuItem(
"Trajectory Analysis", icon = icon("project-diagram"),
menuItem("Trajectory Analysis", tabName = "trajectory", icon = icon("clock")),
menuItem("Genes pseudotime", tabName = "genes_pseudotime", icon = icon("fa-solid fa-hourglass"))
),
menuItem("The converter", tabName = "converter",icon = icon("file")),
menuItem("Acknowledgement & Licence", tabName = "acknowledgement", icon = icon("heart"))
)
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
library(shiny); runApp('main_server.R')
library(shiny); runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
if(all(gene_list %in% rownames(rv_merge$seurat_integrated[["RNA"]]@counts))) {
output$DotPlot2 <- renderPlot({
DotPlot(rv_merge$seurat_integrated, features = gene_list) + RotatedAxis()
})
} else {
print("Requested genes are not present in the dataset.")
}
runApp('main_server.R')
runApp('main_server.R')
output$vln_plot <- renderPlot({
if(input$hide_vln_points) {
VlnPlot(seurat_tmp(), features = gene_list, log = TRUE, pt.size = 0)
} else {
VlnPlot(seurat_tmp(), features = gene_list, log = TRUE)
}
})
runApp('main_server.R')
runApp('main_server.R')
observe({
if (!is.null(scaled_seuratRNA())) {
seurat_tmp(scaled_seuratRNA())
}
})
runApp('main_server.R')
runApp('main_server.R')
runApp('main_server.R')
